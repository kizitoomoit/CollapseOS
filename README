# Collapse OS

*Fork Author's Notes*

While you will find the original CollapseOS repository and several forks of it
within github, the author of the OS is developing on 8-bit workstations and has
reverted to a more old-school method of maintaining repositories, namely, the
scm tool.

While the project continues to see improvements from upstream, the core of the
project was announced as complete on March 20th 2021. What this means is that
CollapseOS has reached the milestones set out by its creator, and that it can be
reasonably relied upon as a bootstrap operating system.

This repository is my versioned fork of the upstream project. The many use-cases
I already have for such a portable forth mean that I will not be eschewing
modern workstations in my work with the OS, though I will attempt only to offer
upstream patches that fall in line with the original scope of the project.

In order to ensure I do not introduce scope creep into the upstream changes,
this repository will maintain multiple long-lived branches. First is the main
branch, which I will use strictly to track changes made upstream. When I merge
changes into main, it should only include changes that have been incorporated
and realeased by the original author of CollapseOS, or whomever may be the
official steward of the project at the time of change.

I also maintain a trunk branch, which will serve as the "functional main branch"
for any customizations to the codebase, whether I write them or they are
contributed by third parties.

When planning to submit changes upstream, a temporary branch off of main should
be used. If changes from trunk are appropriate, you may include them, but do not
branch from trunk to do so. The upstream developers are going to be most
comfortable receiving and working with standard patch files, so you'll want to
generate patches from your temporary branch.

If your changes are incorporated upstream, use the released tarball containing
your changes to update the main branch, rather than merging your changes in, as
there may be additional changes to the upstream release besides your own.

*Updating the main branch*

Regardless of whether we submit changes upstream, when a new release is made, we
have the option (not required) to update the main branch to match what is most
recently available. Note that starting from the v1.0.0 tag here, we are working
from a solid foundation, and it's not strictly required that we follow along
with upstream releases to use the project, at all.

For updating, though, prefer this method.

- Checkout the main branch, stashing or committing any changes you're working
  on.
- Remove all the files except the .git dir from the project.
- Download the newly released tarball from collapseos.org
- Untar the contents directly into the top level project folder (it will
  tar-bomb the dir, so just untar in place.)
- Test the builds and suchwhat, make sure everything is working. It is trivial
  to revert to the most recent commit; do so if needed.
- Create a new commit with message "Updated to release 20210421". Note that the
  date is just an example, and actually represents the release used for v1.0.0.
- Push the new commit to origin (or wherever.)

*Bootstrap post-collapse technology*

Collapse OS is a Forth operating system and a collection of tools and
documentation with a single purpose: preserve the ability to program micro-
controllers through civilizational collapse.

It it designed to:

1. Run on minimal and improvised machines.
2. Interface through improvised means (serial, keyboard, display).
3. Edit text files.
4. Compile assembler source files for a wide range of MCUs and CPUs.
5. Read and write from a wide range of storage devices.
6. Assemble itself and deploy to another machine.

Additionally, the goal of this project is to be as self-contained as possible.
With a copy of this project, a capable and creative person should be able to
manage to build and install Collapse OS without external resources (i.e.
internet) on a machine of her design, built from scavenged parts with low-tech
tools.

# Getting started

Documentation is in text files in `doc/`. Begin with `intro.txt`.

Collapse OS can run on any POSIX platform and builds easily.
See `cvm/README` for instructions.

# Organisation of this repository

* blk.fs: Collapse OS filesystem's content. See below.
* cvm: A C implementation of Collapse OS, allowing it to run natively on any
       POSIX platform.
* doc: Documentation. Begin with intro.txt.
* arch: collection of makefiles that assemble Collapse OS on different machines.
* tools: Tools for working with Collapse OS from "modern" environments. For
         example, tools for facilitating data upload to a Collapse OS machine
         through a serial port.
* emul: Tools for running Collapse OS in an emulated environment.
* extras: Forth code designed for running in Collapse OS but that are beyond the
          scope of its design goals. See extras/README.

# blk.fs

This file is a big text file containing the "real deal", that is, the contents
of Collapse OS' filesystem. That filesystem contains everything that a
post-collapse computer would manage, that is, all Forth and assembler source
code for the tools it needs to fulfill its goals.

The Collapse OS filesystem is a simple sequence of 1024 bytes blocks. That is
not very workable in the text editor of a modern system. `blk.fs` represents an
"unpacked" view of that block system. Each block (16 lines max per block, 64
chars max per line) begins with a marker indicating the block number of the
contents that follow.

Blocks must be in ascending order.

That file can be "packed" to a real blkfs with `/tools/blkpack`. A real blkfs
can be "unpacked" to its text file form with `/tools/blkunpack`.

# Version control

To allow a deeper understanding of the code, changes to Collapse OS' source
is kept under RCS. Unlike most uses of version control systems, the goal here
is not to be able to branch or to checkout specific revisions: tarballs
snapshots can be used for this.

The goal is to keep a record of changes and their rationale, in case someone
examining the code wonders about such things. To that end, only the "real deal"
is versioned, that is "blk.fs".

Other source files (CVM, emulators, tools) are considered accessory and are
not version-controlled.

RCS versioning begins at 2021-01-05. Previously, versioning was done through
Git. An archive of that git repository is available on Collapse OS' website.

# Emulation and dogfooding

Emulation used to be a central tool to developing new ports for Collapse OS.
On a POSIX platform, I would begin by creating an emulator for my target
machine, fool around, then when I thought I had something good, test on real
hardware for adjustments.

With the 6809 port, I wanted to take dogfooding more seriously and began
developing ports from Collapse OS itself on vintage machines. This allows me
to see opportunities for usability improvements and detect bugs much better than
when using a POSIX platform.

Because of that, the "emul" folder is no longer improved.

# Looking for the assembler version?

The Forth-based Collapse OS is the second incarnation of the concept. The first
one was entirely written in z80 assembly. If you're interested in that
incarnation, checkout the `z80asm` branch in the Git archive.
